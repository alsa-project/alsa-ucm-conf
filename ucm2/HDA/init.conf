Define.HasSpeaker ""

If.amute {
	Condition {
		Type ControlExists
		Control "name='Auto-Mute Mode'"
	}
	True.BootSequence [
		cset "name='Auto-Mute Mode' off"
	]
}

If.master {
	Condition {
		Type ControlExists
		Control "name='Master Playback Volume'"
	}
	True.BootSequence [
		cset "name='Master Playback Volume' 60%"
		cset "name='Master Playback Switch' on"
	]
}

If.speaker {
	Condition {
		Type ControlExists
		Control "name='Speaker Playback Switch'"
	}
	True {
		Define.HasSpeaker "switch"
		BootSequence [
			cset "name='Speaker Playback Switch' off"
		]
		If.v {
			Condition {
				Type ControlExists
				Control "name='Speaker Playback Volume'"
			}
			True {
				Define.HasSpeaker "volume"
				BootSequence [
					cset "name='Speaker Playback Volume' 60%"
				]
			}
		}
	}
}

If.bass-speaker {
	Condition {
		Type ControlExists
		Control "name='Bass Speaker Playback Switch'"
	}
	True {
		Define.HasBassSpeaker "switch"
		BootSequence [
			cset "name='Bass Speaker Playback Switch' off"
		]
		If.v {
			Condition {
				Type ControlExists
				Control "name='Bass Speaker Playback Volume'"
			}
			True {
				Define.HasBassSpeaker "volume"
				BootSequence [
					cset "name='Bass Speaker Playback Volume' 60%"
				]
			}
		}
	}
}

If.headphone {
	Condition {
		Type ControlExists
		Control "name='Headphone Playback Volume'"
	}
	True.BootSequence [
		cset "name='Headphone Playback Volume' 60%"
		cset "name='Headphone Playback Switch' off"
	]
}

If.capture {
	Condition {
		Type ControlExists
		Control "name='Capture Volume'"
	}
	True.BootSequence [
		cset "name='Capture Volume' 60%"
	]
}

#
# Bass (four) Speakers
#

Define.Speaker4chBass ""

If.bass-spk-switch {
	Condition {
		Type String
		Empty "${var:HasBassSpeaker}"
	}
	False {
		Include.ctl-remap.File "/lib/ctl-remap.conf"

		LibraryConfig.remap.Config {
			ctl.default.sync {
				speaker_bass_sync_switch {
					switch "name='Speaker 4ch SyncSw Playback Switch'"
					controls [
						"name='Speaker Playback Switch'"
						"name='Bass Speaker Playback Switch'"
					]
				}
			}
			ctl.default.map {
				"name='Speaker 4ch Playback Switch'" {
					"name='Speaker Playback Switch'" { vindex.0 0 vindex.1 1 }
					"name='Bass Speaker Playback Switch'" { vindex.2 0 vindex.3 1 }
				}
			}
		}

		Define.Speaker4chBass "y"
		Define.SpeakerSyncVol ""

		If.vol {
			Condition {
				Type String
				Haystack "${var:HasSpeaker}"
				Needle "volume"
			}
			True {
				Define.SpeakerSyncVol "y"
				If.bass-vol {
					Condition {
						Type String
						Heystack "${var:HasBassSpeaker}"
						Needle "volume"
					}
					False.LibraryConfig.remap.Config {
						# remap may be better
						ctl.default.sync {
							speaker_bass_sync_volume {
								switch "name='Speaker 4ch SyncVol Playback Switch'"
								controls [
									"name='Speaker Playback Volume'"
								]
							}
						}
						ctl.default.map {
							# FIXME
							"name='Speaker 4ch Playback Volume'" {
								"name='Speaker Playback Volume'" { vindex.0 0 vindex.1 1 vindex.2 0 vindex.3 1 }
							}
						}
					}
					True.LibraryConfig.remap.Config {
						ctl.default.sync {
							speaker_bass_sync_volume {
								switch "name='Speaker 4ch SyncVol Playback Switch'"
								controls [
									"name='Speaker Playback Volume'"
									"name='Bass Speaker Playback Volume'"
								]
							}
						}
						ctl.default.map {
							"name='Speaker 4ch Playback Volume'" {
								"name='Speaker Playback Volume'" { vindex.0 0 vindex.1 1 }
								"name='Bass Speaker Playback Volume'" { vindex.2 0 vindex.3 1 }
							}
						}
					}
				}
			}
		}
	}
}
