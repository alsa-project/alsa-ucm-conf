#
# Microphone/Speaker LED handling seems like an easy task, but
# the expectations are different:
#
# Main question: Which state should LEDs follow (devices)?
#
# case 1) set LEDs only for internal resources (speaker/microphone)
# case 2) set LEDs according the current stream (input/output)
# case 3) like case 1, but add analog headphones connected to laptop (analog jack)
#
# Discussion for case 2: It is not possible to handle this in driver
# (kernel). Usually, sound server knowns the current stream (maybe routed to
# bluetooth for example). Also, there is a security flaw, if the sound server will
# control LED directly.
#
# Discussion for case 3: Note that we have currently also USB headphones which won't follow
# the scenario. In this case, there is not clear LED mapping. It seems like that this case
# is a bit controversional. Thus analog headphones may be handled as external device.
#
# Result: For safety and for the simplicity and understable behaviour, only
# case 1 - LEDs should follow only internal speaker output and microphone
# input in UCM.
#

#
# Macro SetLED - attach or detach speaker or microphone LED to given control element
#
# Arguments:
#   LED    - LED selection - "speaker" or "mic"
#   Action - action for given control - "attach" or "detach"
#   CtlId  - control identifier (as for amixer, e.g. "Capture Switch" or "name='CaptureSwitch',index=1")
#

DefineMacro.SetLED {
	If.0 {
		Condition {
			Type String
			Empty "${var:-SndCtlLedModprobe}"
		}
		True {
			FixedBootSequence [
				exec "-/sbin/modprobe snd_ctl_led"
			]
			Define.SndCtlLedModprobe ok
		}
	}
	If.1 {
		Condition { Type AlwaysTrue }
		True.FixedBootSequence [
			sysw "-/class/sound/ctl-led/${var:__LED}/card${CardNumber}/${var:__Action}:${var:__CtlId}"
		]
	}
}

#
# Macro CtlNew - helper to create new control elemend
#
# Arguments:
#   Arg    - string for cset-new
#

DefineMacro.CtlNew.FixedBootSequence [
	cset-new "${var:__Arg}"
]
